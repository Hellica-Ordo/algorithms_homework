"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
from timeit import timeit
from random import randint

def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj

def bubble_sort_opt(lst_obj):
    n = 1
    stop_word = None
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                stop_word = False
        if stop_word:
            break
        n += 1
        stop_word = True
    return lst_obj

my_list = [randint(-100, 100) for i in range(100)]
print(my_list)

print("Сортировка неоптимизированного массива из 100 элементов:")
print(timeit("bubble_sort(my_list[:])", globals = globals(), number = 100))
print("Сортировка оптимизированного массива из 100 элементов:")
print(timeit("bubble_sort_opt(my_list[:])", globals = globals(), number = 100))

"""ВЫВОДЫ:
Для оптимизации алгоритма я добавила переменную-флаг для проверки, закончена ли сортировка. В данном случае (когда массив задан рандомными значениями) такая оптимизация
не имеет смысла, и даже наоборот может незначительно увеличить время работы алгоритма. Оптимизация с флагом будет полезна для частично отсортированных массивов (а шанс
того, что массив из рандомных значений таким будет, почти нулевой)."""