"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Хотя в примерах к уроку уже есть вариант реализации слияния,
попробуйте предложить другой (придумать или найти).

И попытаться сделать замеры на массивах разной длины: 10, 100, 1000, ...

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""
from random import uniform
from timeit import timeit


def merge_sort(lst_obj):
    if len(lst_obj) > 1:
        center = len(lst_obj) // 2
        left = lst_obj[:center]
        right = lst_obj[center:]

        merge_sort(left)
        merge_sort(right)

        # перестали делить
        # выполняем слияние
        i, j, k = 0, 0, 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                lst_obj[k] = left[i]
                i += 1
            else:
                lst_obj[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            lst_obj[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            lst_obj[k] = right[j]
            j += 1
            k += 1
        return lst_obj


my_list10 = [uniform(0, 50) for i in range(10)]
my_list100 = [uniform(0, 50) for i in range(100)]
my_list1000 = [uniform(0, 50) for i in range(1000)]

print(f"Исходный список: {my_list10}")
print(f"Отсортированный список: {merge_sort(my_list10)}")
print("Сортировка массива из 10 элементов:")
print(timeit("merge_sort(my_list10[:])", globals=globals(), number=100))
print(f"Исходный список: {my_list100}")
print(f"Отсортированный список: {merge_sort(my_list100)}")
print("Сортировка массива из 100 элементов:")
print(timeit("merge_sort(my_list100[:])", globals=globals(), number=100))
print(f"Исходный список: {my_list1000}")
print(f"Отсортированный список: {merge_sort(my_list1000)}")
print("Сортировка массива из 1000 элементов:")
print(timeit("merge_sort(my_list1000[:])", globals=globals(), number=100))

"""ВЫВОДЫ:
Так как сложность такого вида сортировки логарифмическая, даже с увеличением числа элементов скорость его работы не снижается настолько сильно, как у других видов сортировки 
с квадратичной сложностью (выбором, вставками, пузырьковой). Вместе с тем, у этого вида сортировки есть свои недостатки - из-за создания нового массива она требует больше памяти."""