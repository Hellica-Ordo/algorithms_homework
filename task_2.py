"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

def parity(your_number, odd = 0, even = 0):
    if your_number == 0:       # базовое условие
        print(f"В вашем числе есть {even} чётных и {odd} нечётных цифр.")
        return
    try:                                # шаг рекурсии
        if your_number % 2 == 1:
            odd += 1
            return parity(your_number // 10, odd, even)
        elif your_number % 2 == 0:
            even += 1
            return parity(your_number // 10, odd, even)
    except TypeError:
        print('Вы ввели не число! Пожалуйста, не делайте так.')
        return parity

parity(123456)
parity('bdsvgdv')